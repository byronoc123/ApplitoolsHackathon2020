// check region by selector in frame multiple times with css stitching
const cwd = process.cwd()
const path = require('path')
const assert = require('assert')
const spec = require(path.resolve(cwd, 'src/spec-driver'))
const {testSetup, getTestInfo} = require('@applitools/sdk-shared')

describe('Coverage Tests', () => {
  let driver, destroyDriver, eyes
  beforeEach(async () => {
    ;[driver, destroyDriver] = await spec.build({browser: 'chrome'})
    eyes = testSetup.getEyes({
      displayName:
        'check region by selector in frame multiple times with css stitching',
      stitchMode: 'CSS',
      baselineName: 'TestCheckRegionInFrame2_Fluent',
    })
  })
  afterEach(async () => {
    await destroyDriver(driver)
    await eyes.abort()
  })
  it('check region by selector in frame multiple times with css stitching', async () => {
    await spec.visit(
      driver,
      'https://applitools.github.io/demo/TestPages/FramesTestPage/'
    )
    await eyes.open(
      driver,
      'Eyes Selenium SDK - Fluent API',
      'TestCheckRegionInFrame2_Fluent',
      {width: 700, height: 460}
    )
    await eyes.check({
      frames: ['frame1'],
      region: '#inner-frame-div',
      ignoreRegions: [{left: 50, top: 50, width: 100, height: 100}],
      isFully: true,
    })
    await eyes.check({
      frames: ['frame1'],
      region: '#inner-frame-div',
      ignoreRegions: [
        {left: 50, top: 50, width: 100, height: 100},
        {left: 70, top: 170, width: 90, height: 90},
      ],
      isFully: true,
    })
    await eyes.check({
      frames: ['frame1'],
      region: '#inner-frame-div',
      isFully: true,
      timeout: 5000,
    })
    await eyes.check({
      frames: ['frame1'],
      region: '#inner-frame-div',
      isFully: true,
    })
    await eyes.check({
      frames: ['frame1'],
      floatingRegions: [
        {
          region: {left: 200, top: 200, width: 150, height: 150},
          maxUpOffset: 25,
          maxDownOffset: 25,
          maxLeftOffset: 25,
          maxRightOffset: 25,
        },
      ],
      isFully: true,
      matchLevel: 'Layout',
    })
    await eyes.close(undefined)
  })
})
